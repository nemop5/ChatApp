[{"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/index.js":"1","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/App.js":"2","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/Auth/Login.js":"3","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/Auth/Register.js":"4","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/apis/Axios.js":"5","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/NotFound.js":"6","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/actions/index.js":"7","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/actions/types.js":"8","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/reducers/index.js":"9"},{"size":1481,"mtime":1611574624203,"results":"10","hashOfConfig":"11"},{"size":309,"mtime":1611577270867,"results":"12","hashOfConfig":"11"},{"size":3584,"mtime":1611577238566,"results":"13","hashOfConfig":"11"},{"size":6043,"mtime":1611569451156,"results":"14","hashOfConfig":"11"},{"size":677,"mtime":1611499528376,"results":"15","hashOfConfig":"11"},{"size":159,"mtime":1611571883707,"results":"16","hashOfConfig":"11"},{"size":170,"mtime":1611574563897,"results":"17","hashOfConfig":"11"},{"size":36,"mtime":1611574563969,"results":"18","hashOfConfig":"11"},{"size":509,"mtime":1611574596360,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"13dm5ng",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/index.js",[],["40","41"],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/App.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/Auth/Login.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/Auth/Register.js",["42","43"],"import React from \"react\";\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport Axios from \"../../apis/Axios\";\nimport md5 from \"md5\";\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let user = {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      eMail: \"\",\n      password: \"\",\n      repeatedPassword: \"\",\n    };\n  \n    this.state = {\n      user: user,\n      errors: [],\n      loading: false\n    };\n  }\n\n  isFormValid = () => {\n    let errors = [];\n    let error;\n\n    if (this.isFormEmpty(this.state.user)) {\n      error = { message: \"Fill in all fields\"};\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else if (!this.isPasswordValid(this.state.user)) {\n      error = { message: \"Password is invalid\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  isFormEmpty = ({ firstName, lastName, username, eMail, password, repeatedPassword }) => {\n    return (\n      !firstName.length ||\n      !lastName.length ||\n      !username.length ||\n      !eMail.length ||\n      !password.length ||\n      !repeatedPassword.length\n    );\n  }\n\n  isPasswordValid = ({ password, repeatedPassword }) => {\n    if (password.length < 6 || repeatedPassword.length < 6) {\n      return false;\n    } else if (password !== repeatedPassword) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  displayErrors = errors =>\n  errors.map((error, i) => <p key={i}>{error.message}</p>);\n\n  handleChange = event => {\n    let control = event.target;\n\n    let name = control.name;\n    let value = control.value;\n\n    let user = this.state.user;\n    user[name] = value;\n\n    this.setState({ user: user });\n  };\n\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    if(this.isFormValid()) {\n      try{\n        await Axios.post(\"/users/\", this.state.user);\n  \n        let user = {\n          firstName: \"\",\n          lastName: \"\",\n          username: \"\",\n          eMail: \"\",\n          password: \"\",\n          repeatedPassword: \"\",\n        };\n  \n        this.setState({ user: user });\n  \n      }catch(error){\n        console.log(error);\n        this.setState({\n          errors: this.state.errors.concat(error),\n          loading: false\n        });\n      }\n    }\n  };\n\n  handleInputError = (errors, inputName) => {\n    return errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n  };\n\n  render() {\n    const { errors } = this.state\n\n    return (\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" icon color=\"violet\" textAlign=\"center\">\n            <Icon name=\"user plus\" color=\"violet\" />\n            Register for ChatApp\n          </Header>\n          <Form onSubmit={(event) => this.handleSubmit(event)} size=\"large\">\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"firstName\"\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"First name\"\n                onChange={this.handleChange}\n                className={this.handleInputError(this.state.errors, \"firstName\")}\n                value={this.state.user.firstName}\n                type=\"text\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"lastName\"\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"Last name\"\n                onChange={this.handleChange}\n                className={this.handleInputError(this.state.errors, \"lastName\")}\n                value={this.state.user.lastName}\n                type=\"text\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"username\"\n                icon=\"user circle\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                onChange={this.handleChange}\n                className={this.handleInputError(this.state.errors, \"username\")}\n                value={this.state.user.username}\n                type=\"text\"\n              />\n\n            <Form.Input\n                fluid\n                name=\"eMail\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"E-mail adress\"\n                onChange={this.handleChange}\n                className={this.handleInputError(this.state.errors, \"eMail\")}\n                value={this.state.user.eMail}\n                type=\"email\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                onChange={(event) => this.handleChange(event)}\n                className={this.handleInputError(this.state.errors, \"password\")}\n                value={this.state.user.password}\n                type=\"password\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"repeatedPassword\"\n                icon=\"repeat\"\n                iconPosition=\"left\"\n                placeholder=\"Password Confirmation\"\n                onChange={(event) => this.handleChange(event)}\n                className={this.handleInputError(this.state.errors, \"repeatedPassword\")}\n                value={this.state.user.repeatedPassword}\n                type=\"password\"\n              />\n\n              <Button color=\"violet\" fluid size=\"large\">\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n          {this.state.errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(this.state.errors)}\n            </Message>\n          )}\n          <Message>\n            Already a user? <Link to=\"/login\">Login</Link>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Register;","/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/apis/Axios.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/components/NotFound.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/actions/index.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/actions/types.js",[],"/home/nemanja/MY MOST RECENT PROJECT/ChatApp/frontend/src/reducers/index.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":11},{"ruleId":"48","severity":1,"message":"52","line":115,"column":13,"nodeType":"50","messageId":"51","endLine":115,"endColumn":19},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'md5' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]